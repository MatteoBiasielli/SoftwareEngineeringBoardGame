package it.polimi.ingsw.LM6.server.game.effects;

import it.polimi.ingsw.LM6.server.game.Action;
import it.polimi.ingsw.LM6.server.game.Player;
import it.polimi.ingsw.LM6.server.game.bonuses.*;
import it.polimi.ingsw.LM6.server.game.exceptions.*;
import it.polimi.ingsw.LM6.server.game.familiar.Familiar;

public class Effect {
	public void applyOn(Action a){
		//EMPTY BECAUSE THIS CLASS MUST BE EXTENDED AND EVERY EXTENSION OVVERRIDES THIS METHOD ONLY IF THE EFFECT IT REPRESENTS TAKES EFFECT ON THE PARAMETER
	}
	public void applyDiscountOnBlue(ResourceSet cost){
		//EMPTY BECAUSE THIS CLASS MUST BE EXTENDED AND EVERY EXTENSION OVVERRIDES THIS METHOD ONLY IF THE EFFECT IT REPRESENTS TAKES EFFECT ON THE PARAMETER
	}
	public void applyDiscountOnYellow(int which,ResourceSet cost){
		//EMPTY BECAUSE THIS CLASS MUST BE EXTENDED AND EVERY EXTENSION OVVERRIDES THIS METHOD ONLY IF THE EFFECT IT REPRESENTS TAKES EFFECT ON THE PARAMETER
	}
	public void applyDiscountOnPurple(ResourceSet cost){
		//EMPTY BECAUSE THIS CLASS MUST BE EXTENDED AND EVERY EXTENSION OVVERRIDES THIS METHOD ONLY IF THE EFFECT IT REPRESENTS TAKES EFFECT ON THE PARAMETER
	}
	public void applyOn(Action a, Bonus b){
		//EMPTY BECAUSE THIS CLASS MUST BE EXTENDED AND EVERY EXTENSION OVVERRIDES THIS METHOD ONLY IF THE EFFECT IT REPRESENTS TAKES EFFECT ON THE PARAMETER
	}
	public void applyOn(Player p, Player[] turnArray){
		//EMPTY BECAUSE THIS CLASS MUST BE EXTENDED AND EVERY EXTENSION OVVERRIDES THIS METHOD ONLY IF THE EFFECT IT REPRESENTS TAKES EFFECT ON THE PARAMETER
	}
	public void applyMarketMaluses() throws CannotGoOnMarketException{
		//EMPTY BECAUSE THIS CLASS MUST BE EXTENDED AND EVERY EXTENSION OVVERRIDES THIS METHOD ONLY IF THE EFFECT IT REPRESENTS TAKES EFFECT ON THE PARAMETER
	}
	public void applyGreenVPMalus() throws NoVPException{
		//EMPTY BECAUSE THIS CLASS MUST BE EXTENDED AND EVERY EXTENSION OVVERRIDES THIS METHOD ONLY IF THE EFFECT IT REPRESENTS TAKES EFFECT ON THE PARAMETER
	}
	public void applyBlueVPMalus() throws NoVPException{
		//EMPTY BECAUSE THIS CLASS MUST BE EXTENDED AND EVERY EXTENSION OVVERRIDES THIS METHOD ONLY IF THE EFFECT IT REPRESENTS TAKES EFFECT ON THE PARAMETER
	}
	public void applyPurpleVPMalus() throws NoVPException{
		//EMPTY BECAUSE THIS CLASS MUST BE EXTENDED AND EVERY EXTENSION OVVERRIDES THIS METHOD ONLY IF THE EFFECT IT REPRESENTS TAKES EFFECT ON THE PARAMETER
	}
	public void applyVPNumericalMaluses(Player p) {
		//EMPTY BECAUSE THIS CLASS MUST BE EXTENDED AND EVERY EXTENSION OVVERRIDES THIS METHOD ONLY IF THE EFFECT IT REPRESENTS TAKES EFFECT ON THE PARAMETER
	}
	public void applyNoActionSpaceBonus(ResourceSet bonus) {
		//EMPTY BECAUSE THIS CLASS MUST BE EXTENDED AND EVERY EXTENSION OVVERRIDES THIS METHOD ONLY IF THE EFFECT IT REPRESENTS TAKES EFFECT ON THE PARAMETER
	}
	public void applyFaithBonus(Player p){
		//EMPTY BECAUSE THIS CLASS MUST BE EXTENDED AND EVERY EXTENSION OVVERRIDES THIS METHOD ONLY IF THE EFFECT IT REPRESENTS TAKES EFFECT ON THE PARAMETER
	}
	public void applyCanGoInOccupiedSpaces() throws CanGoInOccupiedSpacesException{
		//EMPTY BECAUSE THIS CLASS MUST BE EXTENDED AND EVERY EXTENSION OVVERRIDES THIS METHOD ONLY IF THE EFFECT IT REPRESENTS TAKES EFFECT ON THE PARAMETER
	}
	public void applyMilitaryRequirementBonuses(ResourceSet milReq) {
		//EMPTY BECAUSE THIS CLASS MUST BE EXTENDED AND EVERY EXTENSION OVVERRIDES THIS METHOD ONLY IF THE EFFECT IT REPRESENTS TAKES EFFECT ON THE PARAMETER
	}
	public void applyNoTowerCoinsCost(ResourceSet coinsCost){
		//EMPTY BECAUSE THIS CLASS MUST BE EXTENDED AND EVERY EXTENSION OVVERRIDES THIS METHOD ONLY IF THE EFFECT IT REPRESENTS TAKES EFFECT ON THE PARAMETER
	}
	public void applyFixedFiveBonus(Player p) {
		//EMPTY BECAUSE THIS CLASS MUST BE EXTENDED AND EVERY EXTENSION OVVERRIDES THIS METHOD ONLY IF THE EFFECT IT REPRESENTS TAKES EFFECT ON THE PARAMETER
	}
	public Bonus getEveryTurnResources(Player p)  throws AlreadyUsedBonusException{
		return new Bonus();
	}
	public void resetEveryTurnBonuses(){
		//EMPTY BECAUSE THIS CLASS MUST BE EXTENDED AND EVERY EXTENSION OVVERRIDES THIS METHOD ONLY IF THE EFFECT IT REPRESENTS TAKES EFFECT ON THE PARAMETER
	}
	public Bonus getEveryTurnHarvest() throws AlreadyUsedBonusException{
		return new Bonus();
	}
	public Bonus getEveryTurnProduction() throws AlreadyUsedBonusException{
		return new Bonus();
	}
	public boolean applyOneSixFamiliarPerTurn(Player p, Familiar f) throws AlreadyUsedBonusException{
		return false;
	}
	public void applyOnCardsBonus(Action a,Bonus b){
		//EMPTY BECAUSE THIS CLASS MUST BE EXTENDED AND EVERY EXTENSION OVVERRIDES THIS METHOD ONLY IF THE EFFECT IT REPRESENTS TAKES EFFECT ON THE PARAMETER
	}
}
